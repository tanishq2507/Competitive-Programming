vector<vector<int>>create_graph_from_tree(int n,vector<int>&parent){
        
        
        vector<vector<int>>graph(n);
        for(int i=0;i<n;i++){
            
            if(parent[i]!=i && parent[i]!=-1){
                graph[i].push_back(parent[i]);
                graph[parent[i]].push_back(i);
            }
        }
       
        return(graph);
    }
    void depth_of_nodes_dfs(int node,int par,vector<vector<int>>&graph,vector<int>&depth){//for tree
        
        if(node==0){
            depth[node]=1;
        }
        else{
            depth[node] = depth[par]+1;
            
        }
        for(auto child :graph[node]){
            if(child!=par){
                depth_of_nodes_dfs(child,node,graph,depth);
            }
        }
        return;
    }
int DFS(int u,int parent,int visited[],long long count[],vector<vector<int>>& adj){
        
        visited[u]=1;
        long long c=0;
        if(adj[u].size()==1 && adj[u][0]==parent){
            c=1;
            count[u]=c;
        return(c);
        }
        for(int v: adj[u]){
        
            if(!visited[v])
            {
                c+=DFS(v,u,visited,count,adj);
            }
        }
        count[u]=c;
        return(c);
       
    }
long long kaydens(vector<int>&arr){
    long long c=0;
    long long max1 = arr[0];
    for(int i=0;i<arr.size();i++){
        c+=arr[i];
        if(c>max1){
            max1=c;
        }
        if(c<0)
            c=0;
    }
    return(max1);
}

int find_parent(int node,vector<int>& parent){
    if(parent[node]==node)
        return(node);
    return(parent[node]=find_parent(parent[node],parent));
}


void make_union(int u,int v,vector<int>& sze,vector<int>&parent){
    int up1,up2;
    up1 = find_parent(u,parent);
    up2 = find_parent(v,parent);
    if(up1!=up2){
        if(sze[up1]>=sze[up2]){
            parent[up2]=up1;
            sze[up1]+=sze[up2];
        }
        else{
            parent[up1]=up2;
            sze[up2]+=sze[up1];
        }
    }
    
}

int mst_weight(vector<vector<int>>&edges2,vector<int>& parent,vector<int>& sze){
//Krushkal's algo
        int i;
        int c=0;
        for(i=0;i<edges2.size();i++){
            c+=make_union(edges2[i],parent,sze);
        }
        return(c);
    }
bool is_mst(int n,vector<int>& parent){
        int i ;
        int par = find_parent(0,parent);
        for(i=1;i<n;i++){
            if(find_parent(i,parent)!=par)
                return(false);
        }
        return(true);
    }

ll mod_expo(ll a,ll b){
    if(a==0)
        return(0);
    if(b==0 or a==1)
        return(1);
    ll result = 1;
    if(b%2==1){
            result = (result%MOD *a%MOD)%MOD;
            b = b-1;
        }
        ll x = mod_expo(a,b/2)%MOD;
        return((  (result*x)%MOD  *x)%MOD);
    
    }
ll mod_mult(ll a,ll b){
    return((a%MOD *b%MOD)%MOD);
}
ll mod_factorial(ll num){
    ll pro=1;
    for(ll i=1;i<=num;i++){
        pro = mod_mult(pro,i);
    }
    return(pro);
}
ll mod_nCr(ll n ,ll r){
    ll a,b,c,d,e,f;
    a = mod_factorial(n);
    b = mod_factorial(r);
    c = mod_factorial(n-r);
    d = mod_mult(b,c);
    e = mod_expo(d,MOD-2);
    f = mod_mult(a,e);
    return(f);
}

vector<int> topo_sort(int v,map<int,vector<int>>&graph){
        vector<int>indeg(v,0);
        for (auto &i : graph){
            for(auto &j: i.second){
                indeg[j]+=1;
            }
        }
        queue<int>q;
        vector<int>ans;
        for(int j=0;j<v;j++){
            if(indeg[j]==0)
                q.push(j);
        }
        while(!q.empty()){
            int node = q.front();
            q.pop();
            ans.push_back(node);
            if(graph.count(node)==1){
                for(auto &j : graph[node]){
                    indeg[j]-=1;
                    if(indeg[j]==0)
                        q.push(j);
                }
            }
        }
        return(ans);
    }

int find_lcs(string &s,string &t,int from1,int from2,vector<vector<int>>&dp,vector<vector<int>>&dp2){
    if(from1>=s.size() || from2>=t.size()){
        return(0);
    }
    if(dp[from1][from2]!=-1)
        return(dp[from1][from2]);
    int result=0;
    if(s[from1]==t[from2]){
        result = 1+(find_lcs(s,t,from1+1,from2+1,dp,dp2));
        dp2[from1][from2]=2;
    }
    else{
        int x1 = find_lcs(s,t,from1+1,from2,dp,dp2);
        int x2 = find_lcs(s,t,from1,from2+1,dp,dp2);
        if(x1>=x2){
            result = x1;
            dp2[from1][from2]=0;
        }
            
        else{
            result = x2;
            dp2[from1][from2]=1;
        }
    }
    return(dp[from1][from2]=result);
}
void dfs_distance_tree(int curr,vector<vector<int>>&gmat,vector<int>&dist,int caller){
        for(int i =0;i<gmat[curr].size();i++){
            int x = gmat[curr][i];
            if(x!=caller){
            dist[x]=dist[curr]+1;
            dfs_distance_tree(x,gmat,dist,curr);
            }
        }
    }
    vector<int>calculate_distance_tree(int node,vector<vector<int>>&gmat,int n){
        vector<int>dist(n,0);
        dfs_distance_tree(node,gmat,dist,-1);
        return(dist);
    }
int diameter_of_tree(vector<vector<int>>&graph,int root){
        vector<int>dist1 = move(calculate_distance_tree(root,graph,graph.size()));
        int p1 = root;
        int max1 = 0,i;
        for(i=0;i<graph.size();i++)
            if(dist1[i]>dist1[p1])
                p1 = i;
        vector<int>dist2 = move(calculate_distance_tree(p1,graph,graph.size()));
        int ans=0;
        for(i=0;i<graph.size();i++)
            if(dist2[i]>ans)
                ans = dist2[i];
        return(ans);
                
    }
bool check_bipartite_dfs_helper(vector<vector<int>>&graph,int curr,vector<int>&color){
        bool result = true;
        for(int i=0;i<graph[curr].size();i++){
            int x = graph[curr][i];
            if(color[x]==-1){
                color[x] = 1-color[curr];
                result = check_bipartite_dfs_helper(graph,x,color);
                if(result==false)
                    return(false);
            }
            else{
                if(color[x]==color[curr])
                    return(false);
            }
        }
        return(true);
}
    bool check_bipartite(vector<vector<int>>&graph,int n){
        vector<int>color(n,-1);
        int flag=0;
        for(int i=0;i<n;i++){
            bool temp;
            if(color[i]==-1){
                color[i] =1;
                temp = check_bipartite_dfs_helper(graph,i,color);
                if(temp==false){
                    return(false);
                }
            }
        }
        return(true);
    }
bool check_regular(string s){
    int open=0;
    
    for(int i=0;i<s.size();i++){
        if(s[i]=='(')
            open+=1;
        else{
            if(open>0)
                open-=1;
            else
                return(false);
        }
    }
    return(true);
}
string reversed_string(string s){
    string rev="";
    for(int i=s.size()-1;i>=0;i--){
        rev+=s[i];
    }
    return(rev);
}

vector<bool> is_prime(100001, true);
vector<int> prime_set;
void seive(int n){
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i <= n; i++) {
        //cout<<i<<end
        if (is_prime[i]  ) {
            prime_set.push_back(i);
            if((long long)i * i <= (long long)n){
            for (int j = i * i; j <= n; j += i)
                    is_prime[j] = false;
            }
        }
    }
}

ll count_common_substr_l_r(string &s1,string &s2){
        
        ll ans = 0;
        ll n = s1.size();
        int i=0,j=0,l1;
        while(j<n){
            if(s2[j]==s1[j]){
                j+=1;
            }
            else{
                l1 = j-i;
                ans += (l1*(l1+1))/2;
                i=j+1;
                j = j+1;
            }
        }
        l1 = j-i;
        ans += (l1*(l1+1))/2;
        return(ans);
    }
    
     void makeComb(vector<char>& charlist,vector<string>& comblist,int index,int k,string& curr){
	//make combinations(strings) of size k from a given vector of characters
        if(curr.size()==k){
            comblist.push_back(curr);
            return;
        }
        if(index==charlist.size()) return;
        makeComb(charlist,comblist,index+1,k,curr);
        curr.push_back(charlist[index]);
        makeComb(charlist,comblist,index+1,k,curr);
        curr.pop_back();
           
    }

vector<int> spf(10000001);

void calc_spf(int N) {
	for(int i=0;i<N;i++)
	    spf[i] =i;
	for (int p = 2; p < N; p++) {
		if (spf[p] != p)
			continue;
		if((long long)p*p<N){
		for (int d = p * p; d < N; d += p)
			spf[d] = min(spf[d], p);
		}
	}
}

vector<int> getPrime_factors_using_spf(int v) {
	vector<int> ps;
	while (v > 1) {
		if (ps.empty() || ps.back() != spf[v])
			ps.push_back(spf[v]);
		v /= spf[v];
	}
	return ps;
}
void find_prime_factorisation(int n,map<int,int>&mp){
    for(int i=2;i*i<=n;i++){
        if(n%i==0){
            mp[i]=0;
            
            while(n%i==0){
                mp[i]+=1;
                n = n/i;
            }
        }
    }
    if(n>1){
        
        mp[n]=1;
    }
    
    return;
}
int count_divisors_from_pf(map<int,int>&mp){
    int c=1;
    for(auto &it:mp){
        c=c*(it.second+1);
    }
    return(c);
}

vector<vector<int>>up;
    getKthAncestor_pre_processing(int n, vector<int>& parent) {
        
        int i,j,v;
        up = vector<vector<int>>(n,vector<int>(20,-1));
        
        for(v=0;v<n;v++){
            up[v][0]=parent[v];
        }
        for(j=1;j<20;j++){
            for(v=0;v<n;v++){
                if(up[v][j-1]!=-1)
                    up[v][j] = up[up[v][j-1]][j-1];
            }
        }
    }
    
    int getKthAncestor(int node, int k) {
        int j=0;
        int v = node;
        for(j=0;j<20;j++){
            if(k & (1<<j)){
                v = up[v][j];
                if(v==-1)
                    return(-1);
            }
        }
        return(v);
    }
    void find_all_possible_sums(ll n,vector<ll>factorials,int used,int ind,ll curr,vector<pair<ll,int>>&all_possible_sums){
        if(ind>=factorials.size()){
            all_possible_sums.push_back({curr,used});
            return;
        }
        if(curr+factorials[ind]<=n){
            find_all_possible_sums(n,factorials,used+1,ind+1,curr+factorials[ind],all_possible_sums);
        }
            find_all_possible_sums(n,factorials,used,ind+1,curr,all_possible_sums);
        
    }
    int count_ones_in_binary(ll num){
        ll temp = num;
        int c=0;
        while(num>0){
            c+=num%2;
            num=num/2;
        }
        return(c);
    }
    int find_sum_dig(ll num){
        int sum1 = 0;
        while(num>0){
            sum1+=num%10;
            num = num/10;
        }
        return(sum1);
    }
void tree_dfs(int curr,vector<vector<int>>&gmat,int caller){
        for(int i =0;i<gmat[curr].size();i++){
            int x = gmat[curr][i];
            if(x!=caller){
            tree_dfs(x,gmat,curr,respect);
            }
        }
    }

const int MAX_N = 100000;
const int LOG = 21;
vector<int> children[MAX_N];
int up[MAX_N][LOG]; // up[v][j] is 2^j-th ancestor of v
int depth[MAX_N];

void dfs_kth_ancestor(int a) {
    
	for(int b : children[a]) {
		depth[b] = depth[a] + 1;
		
		up[b][0] = a; // a is parent of b
		for(int j = 1; j < LOG; j++) {
			up[b][j] = up[up[b][j-1]][j-1];
		}
		dfs_kth_ancestor(b);
	}
}
int get_lca(int a, int b) { // O(log(N))
	if(depth[a] < depth[b]) {
		swap(a, b);
	}
	// 1) Get same depth.
	int k = depth[a] - depth[b];
	for(int j = LOG - 1; j >= 0; j--) {
		if(k & (1 << j)) {
			a = up[a][j]; // parent of a
		}
	}
	// 2) if b was ancestor of a then now a==b
	if(a == b) {
		return a;
	}
	// 3) move both a and b with powers of two
	for(int j = LOG - 1; j >= 0; j--) {
		if(up[a][j] != up[b][j]) {
			a = up[a][j];
			b = up[b][j];
		}
	}
	return up[a][0];
}
void dfs_matrix(int i,int j,vector<vector<int>>&matrix,vector<pair<int,int>>&island,vector<vector<bool>>&visited){
    int n = matrix.size();
    int m = matrix[0].size();
    if(i<0 || j<0 || i>=n||j>=m){
        return;
    }
    
    if(matrix[i][j]==1)
        return;
    
    if(visited[i][j]==true)
        return;
    island.push_back({i,j});
    
    visited[i][j] = true;
    dfs_matrix(i+1,j,matrix,island,visited);
    dfs_matrix(i-1,j,matrix,island,visited);
    dfs_matrix(i,j+1,matrix,island,visited);
    dfs_matrix(i,j-1,matrix,island,visited);
    
}

ll phi(ll n) {
//Eulers Totient function
    ll result = n;
    for (ll i = 2; i * i <= n; i++) {
        if (n % i == 0) {
            while (n % i == 0)
                n /= i;
            result -= result / i;
        }
    }
    if (n > 1)
        result -= result / n;
    return result;
}

void phi_1_to_n(int n) {
    for (int i = 0; i <= n; i++)
        phi[i] = i;

    for (int i = 2; i <= n; i++) {
        if (phi[i] == i) {
            for (int j = i; j <= n; j += i)
                phi[j] -= phi[j] / i;
        }
    }
	
}

void coloring01_helper(vector<vector<int>>&graph,int curr,vector<int>&color){
        
        for(int i=0;i<graph[curr].size();i++){
            int x = graph[curr][i];
            if(color[x]==-1){
                
                color[x] = 1-color[curr];
                coloring01_helper(graph,x,color);
            }
        }
}
    void coloring01(vector<vector<int>>&graph,int n,vector<int>&color){
        
        for(int i=0;i<n;i++){
            bool temp;
            if(color[i]==-1){
                color[i] =1;
                coloring01_helper(graph,i,color);
                
            }
        }
    }
bool dfs_cycle_detector(int node,int par,vector<int>&temp,vector<bool>&visited,vector<vector<int>>&graph){
    visited[node]=true;
    temp.push_back(node);
    
    for(int &v:graph[node]){
        
        if(visited[v]==false){
            if(dfs_cycle_detector(v,node,temp,visited,graph)==true)
                return(true);
            }
        else{
            if(par!=v){
                temp.push_back(v);
                return(true);
            }
        }
        
    }
    temp.pop_back();
    return(false);
}
vector<int>find_nodes_in_cycle(vector<vector<int>>&graph){
    int n = graph.size();
    vector<bool>visited(n,false);
    vector<int>temp;
    bool result = false;
    for(int i=0;i<n;i++){
        if(visited[i]==false){
            result = dfs_cycle_detector(i,-1,temp,visited,graph);
            if(result==true)
                break;
        }
    }
    if(result==false)
        return(temp);
    else{
        vector<int>ans;
        int sze = temp.size();
        int st = temp[sze-1];
        ans.push_back(st);
        for(int i=sze-2;i>=0;i--){
            if(temp[i]==st)
                break;
            ans.push_back(temp[i]);
        }
        return(ans);
    }
}
int rem_of_large_num(vector<int>num,int d){
    int i,n;
    n = num.size();
    int rem=0;
    for(i=0;i<n;i++){
        rem = (rem*10+num[i])%d;
    }
    return(rem);
}
int diophantine_gcd(int a, int b, int& x, int& y) {
    if (b == 0) {
        x = 1;
        y = 0;
        return a;
    }
    int x1, y1;
    int d = diophantine_gcd(b, a % b, x1, y1);
    x = y1;
    y = x1 - y1 * (a / b);
    return d;
}
bool find_any_solution(int a, int b, int c, int &x0, int &y0) {
	//find any solution to linear diophantine equation
    int g = diophantine_gcd(abs(a), abs(b), x0, y0);
    if (c % g) {
        return false;
    }

    x0 *= c / g;
    y0 *= c / g;
    if (a < 0) x0 = -x0;
    if (b < 0) y0 = -y0;
    return true;
}
int shortest_path_bfs(vector<vector<int>>&graph,int s,int f){
	//shortest distance from source node s to destination node f
    if(s==f)
        return(0);
    queue<int>que;
    que.push(s);
    int n = graph.size();
    vector<bool>visited(n,false);
    visited[s]=true;
    int ans=0;
    while(que.empty()==0){
        int sze = que.size();
        ans++;
        for(int i=0;i<sze;i++){
            int curr = que.front();
            que.pop();
            
            for(auto &friend1:graph[curr]){
                if(visited[friend1]==true)
                    continue;
                else{
                    if(friend1==f)
                        return(ans);
                    que.push(friend1);
                    visited[friend1]=true;
                }
            }
        }
    }
    return(-1);
}

vector<vector<int>> shortest_dist_from_src_bfs_matrix(vector<vector<char>>&graph,int si,int sj){
    //returns shortest distance from source node to all nodes in graph
    int dist = 0;
    queue<pair<int,int>>que;
    int r,c;
    
    r = graph.size();
    c = graph[0].size();
    
    que.push(make_pair(si,sj));
    vector<vector<bool>>visited(r,vector<bool>(c,false));
    visited[si][sj]=true;
    vector<vector<int>>dist_mat(r,vector<int>(c,1e9));
    while(que.empty()==0){
        dist++;
        int sze=que.size();
        for(int i=0;i<sze;i++){
            pair<int,int>p1 = que.front();
            que.pop();
            int x = p1.first;
            int y = p1.second;
            if(x+1<r && graph[x+1][y]!='T' && visited[x+1][y]==false){
                visited[x+1][y]=true;
                dist_mat[x+1][y]=dist;
                que.push(make_pair(x+1,y));
            }
            if(x-1>=0 && graph[x-1][y]!='T' && visited[x-1][y]==false){
                visited[x-1][y]=true;
                dist_mat[x-1][y]=dist;
                que.push(make_pair(x-1,y));
            }
            if(y+1<c && graph[x][y+1]!='T' && visited[x][y+1]==false){
                visited[x][y+1]=true;
                dist_mat[x][y+1]=dist;
                que.push(make_pair(x,y+1));
            }
            if(y-1>=0 && graph[x][y-1]!='T' && visited[x][y-1]==false){
                visited[x][y-1]=true;
                dist_mat[x][y-1]=dist;
                que.push(make_pair(x,y-1));
            }
        }
    }
    return(dist_mat);
}
vector<int> shortest_dist_bfs(vector<vector<int>>&graph,vector<int>&imp_nodes){
    // shortest distance to all nodes from imp/starting nodes
    queue<int>que;
    int n = graph.size();
    vector<int>dist_list(n,1e9);
    vector<bool>visited(n,false);
    for(int i=0;i<imp_nodes.size();i++){
        que.push(imp_nodes[i]);
        visited[imp_nodes[i]]=true;
        dist_list[imp_nodes[i]]=0;
    }
    
    int dist=0;
    while(que.empty()==0){
        int sze = que.size();
        dist++;
        for(int i=0;i<sze;i++){
            int curr = que.front();
            que.pop();
            
            for(auto &friend1:graph[curr]){
                if(visited[friend1]==true)
                    continue;
                else{
                    dist_list[friend1]=dist;
                    que.push(friend1);
                    visited[friend1]=true;
                }
            }
        }
    }
    return(dist_list);
}//04:17 20-09-2023

int count_children(vector<vector<int>>&children,int curr,vector<int>&dp){
	//count subordinates of each node
    if(dp[curr]!=-1)
        return(dp[curr]);
    int res=0;
    for(int child:children[curr]){
        res+=1+count_children(children,child,dp);
    }
    return(dp[curr] = res);
}
